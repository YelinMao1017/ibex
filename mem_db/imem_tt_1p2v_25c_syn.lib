/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2024  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname imem -words 256 -bits 32 -frequency 10 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met1 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  imem
 *      Words:          256
 *      Word Width:     32
 *      Mux:            2
 *      Corner:        tt_1p2v_25c
 *
 *      Creation Date:  2024-05-04 21:20:02Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2024-05-04 21:20:02Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2024 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 25.000;
	nom_voltage		: 1.200;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(tt_1p2v_25c) {
		process	 : 1;
		temperature	 : 25.000;
		voltage	 : 1.200;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : tt_1p2v_25c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(imem_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(imem_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(imem_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(imem_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(imem_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(imem_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (imem_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 32;
		bit_from : 31;
		bit_to : 0 ;
		downto : true ;
	}
	type (imem_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (imem_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(imem) {
	area		 : 40778.817;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 32;
	}
        bus(Q)   {
                bus_type : imem_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(imem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.973, 1.995, 2.016, 2.071, 2.213, 2.441, 2.681", \
                          "2.005, 2.027, 2.048, 2.103, 2.245, 2.473, 2.713", \
                          "2.045, 2.067, 2.089, 2.143, 2.285, 2.514, 2.753", \
                          "2.125, 2.147, 2.169, 2.223, 2.365, 2.594, 2.834", \
                          "2.366, 2.388, 2.410, 2.464, 2.606, 2.835, 3.074", \
                          "2.768, 2.789, 2.811, 2.866, 3.007, 3.236, 3.476", \
                          "3.169, 3.191, 3.213, 3.267, 3.409, 3.638, 3.877" \
                        )
                        }
                        rise_transition(imem_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.050, 0.102, 0.155, 0.285, 0.623, 1.170, 1.743")
                        }
                        cell_fall(imem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.973, 1.995, 2.016, 2.071, 2.213, 2.441, 2.681", \
                          "2.005, 2.027, 2.048, 2.103, 2.245, 2.473, 2.713", \
                          "2.045, 2.067, 2.089, 2.143, 2.285, 2.514, 2.753", \
                          "2.125, 2.147, 2.169, 2.223, 2.365, 2.594, 2.834", \
                          "2.366, 2.388, 2.410, 2.464, 2.606, 2.835, 3.074", \
                          "2.768, 2.789, 2.811, 2.866, 3.007, 3.236, 3.476", \
                          "3.169, 3.191, 3.213, 3.267, 3.409, 3.638, 3.877" \
                        )
                        }
                        fall_transition(imem_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.055, 0.118, 0.181, 0.339, 0.749, 1.412, 2.107")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.057;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.355 ;
                min_pulse_width_low  : 0.585 ;
                min_period           : 4.126 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(imem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("24.698, 24.698")
                        }
                        fall_power(imem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(imem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("22.219, 22.219")
                        }
                        fall_power(imem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(imem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.083, 0.083")
                        }
                        fall_power(imem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.560, 0.590, 0.629, 0.706, 0.936, 1.321, 1.705", \
                          "0.528, 0.558, 0.597, 0.674, 0.904, 1.289, 1.673", \
                          "0.487, 0.518, 0.557, 0.634, 0.864, 1.248, 1.633", \
                          "0.407, 0.438, 0.476, 0.553, 0.784, 1.168, 1.553", \
                          "0.166, 0.197, 0.235, 0.312, 0.543, 0.927, 1.312", \
                          "-0.235, -0.204, -0.166, -0.089, 0.142, 0.526, 0.910", \
                          "-0.637, -0.606, -0.567, -0.491, -0.260, 0.124, 0.509" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.642, 0.675, 0.717, 0.799, 1.048, 1.461, 1.875", \
                          "0.610, 0.643, 0.685, 0.767, 1.015, 1.429, 1.842", \
                          "0.570, 0.603, 0.645, 0.727, 0.975, 1.389, 1.802", \
                          "0.490, 0.523, 0.564, 0.647, 0.895, 1.309, 1.722", \
                          "0.249, 0.282, 0.323, 0.406, 0.654, 1.068, 1.481", \
                          "-0.153, -0.119, -0.078, 0.005, 0.253, 0.666, 1.080", \
                          "-0.554, -0.521, -0.480, -0.397, -0.149, 0.265, 0.678" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.058, 0.028, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.460, 0.429, 0.391, 0.314, 0.083, 0.000, 0.000", \
                          "0.861, 0.830, 0.792, 0.715, 0.485, 0.100, 0.000" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.370, 0.337, 0.295, 0.213, 0.000, 0.000, 0.000", \
                          "0.771, 0.738, 0.697, 0.614, 0.366, 0.000, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.365, 0.397, 0.438, 0.520, 0.764, 1.172, 1.580", \
                          "0.333, 0.365, 0.406, 0.488, 0.732, 1.140, 1.548", \
                          "0.293, 0.325, 0.366, 0.448, 0.692, 1.100, 1.508", \
                          "0.212, 0.245, 0.286, 0.367, 0.612, 1.020, 1.428", \
                          "-0.029, 0.004, 0.045, 0.126, 0.371, 0.779, 1.187", \
                          "-0.430, -0.397, -0.357, -0.275, -0.030, 0.377, 0.785", \
                          "-0.831, -0.799, -0.758, -0.677, -0.432, -0.024, 0.384" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.500, 0.528, 0.563, 0.633, 0.843, 1.193, 1.543", \
                          "0.468, 0.496, 0.531, 0.601, 0.811, 1.161, 1.511", \
                          "0.428, 0.456, 0.491, 0.561, 0.771, 1.121, 1.470", \
                          "0.348, 0.376, 0.411, 0.481, 0.691, 1.040, 1.390", \
                          "0.107, 0.135, 0.170, 0.240, 0.450, 0.800, 1.149", \
                          "-0.294, -0.266, -0.231, -0.162, 0.048, 0.398, 0.748", \
                          "-0.696, -0.668, -0.633, -0.563, -0.353, -0.003, 0.346" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.035, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.115, 0.082, 0.042, 0.000, 0.000, 0.000, 0.000", \
                          "0.356, 0.323, 0.282, 0.201, 0.000, 0.000, 0.000", \
                          "0.757, 0.725, 0.684, 0.602, 0.358, 0.000, 0.000", \
                          "1.159, 1.126, 1.085, 1.004, 0.759, 0.351, 0.000" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.004, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.045, 0.017, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.125, 0.097, 0.062, 0.000, 0.000, 0.000, 0.000", \
                          "0.366, 0.338, 0.303, 0.233, 0.023, 0.000, 0.000", \
                          "0.767, 0.739, 0.704, 0.634, 0.424, 0.075, 0.000", \
                          "1.169, 1.141, 1.106, 1.036, 0.826, 0.476, 0.126" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : imem_ADDRESS;
                direction : input;
                capacitance : 0.013;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.772, 0.807, 0.851, 0.939, 1.203, 1.642, 2.081", \
                          "0.740, 0.775, 0.819, 0.907, 1.170, 1.610, 2.049", \
                          "0.700, 0.735, 0.779, 0.867, 1.130, 1.570, 2.009", \
                          "0.619, 0.655, 0.699, 0.786, 1.050, 1.489, 1.929", \
                          "0.379, 0.414, 0.458, 0.546, 0.809, 1.249, 1.688", \
                          "-0.023, 0.012, 0.056, 0.144, 0.408, 0.847, 1.286", \
                          "-0.424, -0.389, -0.345, -0.257, 0.006, 0.446, 0.885" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.311, 0.344, 0.384, 0.466, 0.711, 1.118, 1.526", \
                          "0.279, 0.311, 0.352, 0.434, 0.679, 1.086, 1.494", \
                          "0.239, 0.271, 0.312, 0.394, 0.638, 1.046, 1.454", \
                          "0.158, 0.191, 0.232, 0.313, 0.558, 0.966, 1.374", \
                          "-0.082, -0.050, -0.009, 0.073, 0.317, 0.725, 1.133", \
                          "-0.484, -0.451, -0.410, -0.329, -0.084, 0.324, 0.731", \
                          "-0.885, -0.853, -0.812, -0.730, -0.486, -0.078, 0.330" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.033, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.073, 0.038, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.154, 0.118, 0.074, 0.000, 0.000, 0.000, 0.000", \
                          "0.394, 0.359, 0.315, 0.227, 0.000, 0.000, 0.000", \
                          "0.796, 0.761, 0.717, 0.629, 0.365, 0.000, 0.000", \
                          "1.197, 1.162, 1.118, 1.030, 0.767, 0.327, 0.000" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.034, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.067, 0.034, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.107, 0.074, 0.033, 0.000, 0.000, 0.000, 0.000", \
                          "0.187, 0.154, 0.114, 0.032, 0.000, 0.000, 0.000", \
                          "0.428, 0.395, 0.354, 0.273, 0.028, 0.000, 0.000", \
                          "0.829, 0.797, 0.756, 0.674, 0.430, 0.022, 0.000", \
                          "1.231, 1.198, 1.157, 1.076, 0.831, 0.423, 0.015" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(imem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.169, 0.169")
                        }
                        fall_power(imem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.169, 0.169")
                        }
                }
        }
        bus(D)   {
                bus_type : imem_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.194, 0.228, 0.269, 0.352, 0.601, 1.016, 1.432", \
                          "0.162, 0.195, 0.237, 0.320, 0.569, 0.984, 1.400", \
                          "0.122, 0.155, 0.197, 0.280, 0.529, 0.944, 1.359", \
                          "0.042, 0.075, 0.116, 0.200, 0.449, 0.864, 1.279", \
                          "-0.199, -0.166, -0.124, -0.041, 0.208, 0.623, 1.038", \
                          "-0.601, -0.567, -0.526, -0.443, -0.194, 0.222, 0.637", \
                          "-1.002, -0.969, -0.927, -0.844, -0.595, -0.180, 0.235" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.338, 0.371, 0.411, 0.493, 0.737, 1.143, 1.550", \
                          "0.306, 0.339, 0.379, 0.461, 0.705, 1.111, 1.518", \
                          "0.266, 0.298, 0.339, 0.420, 0.664, 1.071, 1.478", \
                          "0.186, 0.218, 0.259, 0.340, 0.584, 0.991, 1.397", \
                          "-0.055, -0.023, 0.018, 0.099, 0.343, 0.750, 1.157", \
                          "-0.457, -0.424, -0.384, -0.302, -0.058, 0.348, 0.755", \
                          "-0.858, -0.826, -0.785, -0.704, -0.460, -0.053, 0.354" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.020, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.052, 0.019, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.092, 0.059, 0.017, 0.000, 0.000, 0.000, 0.000", \
                          "0.172, 0.139, 0.097, 0.014, 0.000, 0.000, 0.000", \
                          "0.413, 0.380, 0.338, 0.255, 0.006, 0.000, 0.000", \
                          "0.814, 0.781, 0.740, 0.657, 0.408, 0.000, 0.000", \
                          "1.216, 1.183, 1.141, 1.058, 0.809, 0.394, 0.000" \
                        )
                        }
                        fall_constraint(imem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.243, 0.211, 0.170, 0.089, 0.000, 0.000, 0.000", \
                          "0.645, 0.612, 0.571, 0.490, 0.246, 0.000, 0.000", \
                          "1.046, 1.014, 0.973, 0.892, 0.648, 0.241, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 1.40E-4;
}
}
